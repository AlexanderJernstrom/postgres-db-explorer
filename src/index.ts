import { app, BrowserWindow, ipcMain } from "electron";
import { client, getClient } from "./database/database";
import { GetClientArgs } from "./types/interfaces";
import installExtension, {
  REACT_DEVELOPER_TOOLS,
} from "electron-devtools-installer";
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

ipcMain.on("connect", async (event, data: GetClientArgs) => {
  try {
    const initialClientQuery = await getClient(data);
    event.reply("tables", {
      rows: initialClientQuery.rows,
      databaseName: initialClientQuery.databaseName,
    });
  } catch (error) {
    event.reply("connectionError", error);
  }
});

ipcMain.on("columnsInTable", async (event, data) => {
  try {
    const result = await client?.query<{
      table_name: string;
      column_name: string;
      data_type: string;
    }>(
      `select table_name, column_name, data_type from information_schema.columns where table_name = '${data.tableName}'`
    );

    event.reply("columns", result.rows);
  } catch (error) {
    event.reply("queryError", error);
  }
});

ipcMain.on("sqlQuery", async (event, data) => {
  console.log(data);
  try {
    const result = await client?.query(data.query);
    console.log(result);
    event.reply("sqlQueryResult", { rows: result.rows, fields: result.fields });
  } catch (error) {
    event.reply("sqlError", error);
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
